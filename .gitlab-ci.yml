test_gcc13_py3_linux:
    image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/gcc_13:2024
    tags:
        - docker
    variables:
        BIOEN_OPENMP: 1
        BIOEN_FAST_CFLAGS: 1
    before_script:
        - module purge
        - module load git
        - module load gcc
        - module load anaconda
        - module list
        - export CC=`which gcc`
        - export CXX=`which g++`
        - pushd third-party
        - ./install_dependencies.sh
        - popd
        - export PATH=${HOME}/.local/bin:${PATH}
        - pip install . --user
    script:
        # run the test cases
        - pushd test/optimize
        - for NT in 1 2 4; do OMP_NUM_THREADS=$NT py.test -sv; done
        - popd
        - pushd test/deer
        - ./run_bioen_deer.sh
        - popd
        - pushd test/generic
        - ./run_bioen.sh
        - popd
        - pushd test/scattering
        - ./run_bioen_saxs.sh
        - popd


test_clang_py3_linux:
    image: gitlab-registry.mpcdf.mpg.de/mpcdf/ci-module-image/gcc_13:2024
    tags:
        - docker
    variables:
        BIOEN_OPENMP: 1
        BIOEN_FAST_CFLAGS: 1
    before_script:
        - module purge
        - module load git
        - module load clang
        - module load anaconda
        - module list
        - export CC=`which clang`
        - export CXX=`which clang++`
        - pushd third-party
        - ./install_dependencies.sh
        - popd
        - export PATH=${HOME}/.local/bin:${PATH}
        - pip install . --user
    script:
        # run the test cases
        - pushd test/optimize
        - for NT in 1 2 4; do OMP_NUM_THREADS=$NT py.test -sv; done
        - popd
        - pushd test/deer
        - ./run_bioen_deer.sh
        - popd
        - pushd test/generic
        - ./run_bioen.sh
        - popd
        - pushd test/scattering
        - ./run_bioen_saxs.sh
        - popd


build_wheels_manylinux2014_x86_64:
    image: quay.io/pypa/manylinux2014_x86_64
    tags:
        - docker
    only:
        - extended_tests
    # (gitlab runner cache) avoid downloading required packages again and again
    cache:
        # one would need to change the following key to discard the cache upon the next run
        key: "$CI_COMMIT_REF_SLUG"
        paths:
            - .cache/pip
    variables:
        # CPYTHONS: "cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310"
        CPYTHONS: "cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39"
        PLAT: "manylinux2014_x86_64"
        CFLAGS: "-O3 -march=nehalem -mtune=haswell -Wno-unknown-pragmas -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -ffunction-sections -pipe"
        BIOEN_CFLAGS: "$CFLAGS"
        BIOEN_OPENMP: "1"
        BIOEN_RPATH: "0"
        #BIOEN_USE_DEFAULT_GSL: "True"
        #BIOEN_USE_DEFAULT_LBFGS: "True"
        # (gitlab runner cache) avoid downloading required packages again and again
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    before_script:
        - mkdir -p ${PIP_CACHE_DIR}
    script:
        # --- build GSL and liblbfgs
        - pushd third-party
        - ./install_dependencies.sh
        - popd
        # --- build sdist and wheels, ready to be uploaded to pypi
        - mkdir packages
        - scripts/build_packages.sh
        - mv -v dist/* packages/
        - mv -v wheelhouse/* packages/
        - rmdir dist
        - rmdir wheelhouse
    only:
        - master
        - develop
    artifacts:
        paths:
            - packages/
        expire_in: 2 days


test_mac_arm64_homebrew:
    tags:
        - mac_arm64
    only:
        - extended_tests
    variables:
        # TODO: fix openmp
        BIOEN_OPENMP: 0
        BIOEN_FAST_CFLAGS: 1
    before_script:
        - export PATH="/opt/anaconda/2022.05/bin:$PATH"
        - export PATH="/opt/homebrew/bin:$PATH"
        - export CC=`which gcc-12`
        - export CXX=`which g++-12`
        # manually clean up potential remnants
        - rm -vrf "${HOME}/.local" "${HOME}/Library/Caches/pip"
        # build gsl and liblbfgs
        - pushd third-party
        - ./install_dependencies.sh
        - popd
        - export PATH=${HOME}/.local/bin:${PATH}
        - pip install . --user
    script:
        # run the test cases
        - pushd test/optimize
        # TODO: fix openmp
        - for NT in 1; do OMP_NUM_THREADS=$NT py.test -sv; done
        - popd
        - pushd test/deer
        - ./run_bioen_deer.sh
        - popd
        - pushd test/generic
        - ./run_bioen.sh
        - popd
        - pushd test/scattering
        - ./run_bioen_saxs.sh
        - popd

